from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_back_kb, abstract_kb_builder
from routers.work_w_notes.states import Notes
from tools.verification_number import verification_number

router = Router(name=__name__)


@router.message(Notes.abstract, Command('edit'))
async def handle_command_note(message: types.Message, state: FSMContext):
    data = await state.get_data()
    filepath = data.get("filepath")

    flag = False
    with open(filepath, "r", encoding="utf-8") as f:
        for line in f:
            if line.startswith("## –ú—ã—Å–ª—å ‚Ññ"):
                flag = True
                break

    if not flag:
        await message.answer(
            text=(
                "‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏."
            )
        )
        return

    await message.answer(
        text=(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã (–ú—ã—Å–ª–∏), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )
    await state.set_state(Notes.edit_note_begin)


@router.message(Command('edit'))
async def handle_invalid_command_note(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /open –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /create."
        )
    )


@router.message(Notes.edit_note_begin, F.text)
async def handle_edit_note_begin_state(message: types.Message, state: FSMContext):
    is_valid, number = await verification_number(message, state, message.text)

    if not is_valid:
        return

    await state.update_data(edit_number=number)
    await message.answer(
        text=(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –º—ã—Å–ª–∏ ‚Ññ{number}.\n\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )
    await state.set_state(Notes.edit_note_end)


@router.message(Notes.edit_note_begin)
async def handle_invalid_edit_note_begin_state(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º—ã—Å–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏.\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∞ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å–∏ ‚Äî –∫–Ω–æ–ø–∫–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )


@router.message(Notes.edit_note_end, F.text)
async def handle_edit_note_end_state(message: types.Message, state: FSMContext):
    data = await state.get_data()

    number = data.get("edit_number")
    filepath = data.get("filepath")
    new_thought = message.text.strip()

    if not filepath:
        await message.answer(
            text=(
                "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /open –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /create, "
                "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
            )
        )
        await state.set_state(Notes.abstract)
        return

    updated_lines = []
    replaced = False

    with open(filepath, encoding='utf-8') as f:
        lines = f.readlines()

    i = 0
    while i < len(lines):
        line = lines[i]
        if line.startswith(f"## –ú—ã—Å–ª—å ‚Ññ{number}"):
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
            updated_lines.append(f"## –ú—ã—Å–ª—å ‚Ññ{number}\n{new_thought}\n\n")
            replaced = True
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é –º—ã—Å–ª—å
            i += 1
            while i < len(lines) and not lines[i].startswith("## –ú—ã—Å–ª—å ‚Ññ"):
                i += 1
            continue
        updated_lines.append(line)
        i += 1

    if replaced:
        with open(filepath, "w", encoding="utf-8") as f:
            f.writelines(updated_lines)
        await message.answer(
            text=(
                f"‚úÖ –ú—ã—Å–ª—å ‚Ññ{number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏."
            )
        )
    else:
        await message.answer(
            text=(
                f"‚ö†Ô∏è –ú—ã—Å–ª—å ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòï\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        )

    await message.answer(
        text="\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏",
        reply_markup=abstract_kb_builder(),
    )

    await state.set_state(Notes.abstract)


@router.message(Notes.edit_note_end)
async def handle_invalid_edit_note_end_state(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )