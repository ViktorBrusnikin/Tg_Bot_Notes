from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_back_kb, abstract_kb_builder
from routers.work_w_notes.states import Notes
from tools.verification_number import verification_number

router = Router(name=__name__)


@router.message(Notes.abstract, Command('delete_thought'))
async def handle_command_delete(message: types.Message, state: FSMContext):
    await message.answer(
        text=(
            "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )
    await state.set_state(Notes.delete_thought)


@router.message(Command('delete_thought'))
async def handle_invalid_command_delete(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É, –º—ã—Å–ª—å –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /open –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        ),
    )


@router.message(Notes.delete_thought, F.text)
async def handle_delete_thought_state(message: types.Message, state: FSMContext):
    is_valid, number = await verification_number(message, state, message.text)

    if not is_valid:
        return

    data = await state.get_data()
    filepath = data.get("filepath")

    updated_lines = []
    current_number = 0

    with open(filepath, encoding="utf-8") as f:
        lines = f.readlines()

    i = 0
    while i < len(lines):
        line = lines[i]

        if line.startswith("## –ú—ã—Å–ª—å ‚Ññ"):
            current_number += 1

            if current_number == number:
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª—è–µ–º—É—é –º—ã—Å–ª—å
                i += 1
                while i < len(lines) and not lines[i].startswith("## –ú—ã—Å–ª—å ‚Ññ"):
                    i += 1
                continue
            else:
                # –ø–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º—ã—Å–ª–∏
                new_number = current_number - 1 if current_number > number else current_number
                line = f"## –ú—ã—Å–ª—å ‚Ññ{new_number}\n"

        updated_lines.append(line)
        i += 1

    with open(filepath, "w", encoding="utf-8") as f:
        f.writelines(updated_lines)

    await message.answer(
        text=(
            f"‚úÖ –ú—ã—Å–ª—å ‚Ññ{number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üóë\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ."
        )
    )

    await message.answer(
        text="\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏",
        reply_markup=abstract_kb_builder()
    )

    await state.set_state(Notes.abstract)


@router.message(Notes.delete_thought)
async def handle_invalid_delete_thought_state(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º—ã—Å–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏.\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∞ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å–∏ ‚Äî –∫–Ω–æ–ø–∫–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )