from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_back_kb, abstract_kb_builder
from routers.work_w_notes.states import Notes
from tools.verification_number import verification_number

router = Router(name=__name__)


@router.message(Notes.abstract, Command('note'))
async def handle_command_note(message: types.Message, state: FSMContext):
    await message.answer(
        text=(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã (–ú—ã—Å–ª–∏), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n"
            "üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.\n"
            "üîπ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è'."
        ),
        reply_markup=exit_back_kb(),
    )
    await state.set_state(Notes.show_thought)


@router.message(Command('note'))
async def handle_invalid_command_note(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /open –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /create.\n"
            "–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏."
        )
    )


@router.message(Notes.show_thought, F.text)
async def handle_state_show_thought(message: types.Message, state: FSMContext):
    is_valid, number = await verification_number(message, state, message.text)

    if not is_valid:
        return

    data = await state.get_data()
    filepath = data.get("filepath")

    content_lines = []
    capture = False


    with open(filepath, encoding="utf-8") as f:
        for line in f:
            if line.startswith(f"## –ú—ã—Å–ª—å ‚Ññ{number}"):
                capture = True
                content_lines.append(line)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
            if capture:
                if line.startswith("## –ú—ã—Å–ª—å ‚Ññ"):  # –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    break
                content_lines.append(line)

    content = "".join(content_lines).strip()

    await message.answer(
        text=f"‚úèÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º—ã—Å–ª–∏:\n\n{content}" if content else f"‚ÑπÔ∏è –ú—ã—Å–ª—å ‚Ññ{number} –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —ç—Ç—É –º—ã—Å–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        parse_mode=ParseMode.MARKDOWN,
    )

    await message.answer(
        text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ.",
        reply_markup=abstract_kb_builder(),
    )

    await state.set_state(Notes.abstract)


@router.message(Notes.show_thought)
async def handle_invalid_state_show_thought(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º—ã—Å–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏."
        )
    )