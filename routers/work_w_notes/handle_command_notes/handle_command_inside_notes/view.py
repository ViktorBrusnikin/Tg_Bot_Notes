from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards.common_keyboards import exit_back_kb
from keyboards.inline_keyboards import (
    view_inline_kb_builder,
    send_file,
    send_text
)
from routers.work_w_notes.states import Notes
from tools.chunk_text import chunk_text

router = Router(name=__name__)


@router.message(Notes.abstract, Command('view'))
async def handle_command_view(message: types.Message, state: FSMContext):
    await message.answer(
        text=(
            "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        ),
        reply_markup=view_inline_kb_builder()
    )
    await message.answer(
        text=(
            "üîô –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ."
        ),
        reply_markup=exit_back_kb()
    )

    await state.set_state(Notes.enumerate_notes)

@router.message(Command('view'))
async def handle_command_view(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–∏ –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É.\n"
            "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π /open –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /create."
        )
    )


@router.message(Notes.enumerate_notes)
async def handle_error_answer_in_view(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n"
            "üîπ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è'.\n"
            "üîπ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."
        ),
        reply_markup=exit_back_kb(),
    )

@router.callback_query(F.data == send_file)
async def handle_cb_send_file(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    filepath = data.get("filepath")

    if not filepath:
        await callback.answer(
            text=(
                "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É."
            )
        )
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π
        await state.set_state(Notes.create_note)
        return

    file = FSInputFile(filepath)  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É .md —Ñ–∞–π–ª—É
    await callback.message.answer_document(file, caption="üìÑ –í–æ—Ç —Ç–≤–æ–π Markdown —Ñ–∞–π–ª —Å –∑–∞–º–µ—Ç–∫–∞–º–∏!")

    await callback.answer()


@router.callback_query(F.data == send_text)
async def handle_cb_send_file(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    filepath = data.get("filepath")

    if not filepath:
        await callback.answer(
            text=(
                "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É."
            )
        )
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π
        await state.set_state(Notes.create_note)
        return

    with open(filepath, encoding='utf-8') as f:
        content = f.read()

    await callback.message.answer(
        text="‚úèÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏:"
    )

    for chunk in chunk_text(content):
        await callback.message.answer(
            text=chunk,
            parse_mode=ParseMode.MARKDOWN
        )

    await callback.answer()