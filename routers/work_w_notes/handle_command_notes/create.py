from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_kb, abstract_kb_builder
from routers.work_w_notes.states import Notes
from tools.create_dir import sanitize_name, unique_md_path, ensure_user_dir

router = Router(name=__name__)


@router.message(Command('create'))
async def handle_command_create(message: types.Message, state: FSMContext):
    await state.set_state(Notes.create_note)
    await message.answer(
        text=(
            "üí° –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–Ω–æ –ø–æ–º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ–∑–∂–µ."
        ),
        reply_markup=exit_kb(),
    )


@router.message(Notes.create_note, F.text)
async def handle_create_note(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    raw_filename = message.text.strip()

    # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback –Ω–∞ chat id –µ—Å–ª–∏ from_user –Ω–µ—Ç)
    user_id = message.from_user.id if message.from_user else message.chat.id

    # —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏
    safe_name = sanitize_name(raw_filename)
    if not safe_name:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return

    # —Å–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    user_dir = ensure_user_dir(user_id)
    filepath = unique_md_path(user_dir, safe_name)

    # —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(f"# {safe_name}\n\n")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ state (—Å—Ç—Ä–æ–∫–∞)
    await state.update_data(filepath=str(filepath), filename=safe_name, user_dir=str(user_dir))

    await state.set_state(Notes.abstract)

    # –ï—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–¥–æ–±–∞–≤–ª–µ–Ω —Å—É—Ñ—Ñ–∏–∫—Å), —Å–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º
    created_name = filepath.name
    await message.answer(
        text=(
            f"üéâ –§–∞–π–ª {created_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏."
        ),
        reply_markup=abstract_kb_builder(),
    )


@router.message(Notes.create_note)
async def handle_error_create_note(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤—ã–±—Ä–∞–≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏."
        ),
        reply_markup=exit_kb(),
    )
