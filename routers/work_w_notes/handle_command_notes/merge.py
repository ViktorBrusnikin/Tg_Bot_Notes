from pathlib import Path
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_kb
from routers.work_w_notes.states import MergeNotes
from tools.create_dir import get_user_dir, sanitize_name, ensure_user_dir

router = Router(name=__name__)


@router.message(Command('merge'))
async def handle_command_merge(message: types.Message, state: FSMContext):
    await message.answer(
        text=(
            "üîó –î–∞–≤–∞–π—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏–º –¥–≤–µ –∑–∞–º–µ—Ç–∫–∏!\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å."
        ),
        reply_markup=exit_kb(),
    )
    await state.set_state(MergeNotes.first_file)


@router.message(MergeNotes.first_file, F.text)
async def handle_merge_firstfile(message: types.Message, state: FSMContext):
    user_dir = get_user_dir(message.from_user.id)  # –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filename = sanitize_name(message.text.strip())
    filepath = user_dir / f"{filename}.md"

    if not filepath.exists():
        await message.answer(
            text=(
                "‚ö†Ô∏è –§–∞–π–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
        )
        return

    await state.update_data(first_filepath=filepath)
    await state.set_state(MergeNotes.second_file)

    await message.answer(
        text=(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ø–µ—Ä–≤–æ–π.\n"
            "–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —Ç—É –∂–µ –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ –∏ –ø–µ—Ä–≤–∞—è."
        ),
        reply_markup=exit_kb(),
    )


@router.message(MergeNotes.first_file)
async def handle_invalid_merge_firstfile(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏."
        ),
        reply_markup=exit_kb()
    )


@router.message(MergeNotes.second_file, F.text)
async def handle_merge_secondfile(message: types.Message, state: FSMContext):
    user_dir = get_user_dir(message.from_user.id)
    filename = sanitize_name(message.text.strip())
    filepath = user_dir / f"{filename}.md"

    if not filepath.exists():
        await message.answer(
            text=(
                "‚ö†Ô∏è –§–∞–π–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."
            )
        )
        return

    data = await state.get_data()
    if data["first_filepath"] == filepath:
        await message.answer(
            text=(
                "‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∑–∞–º–µ—Ç–∫—É —Å —Å–∞–º–æ–π —Å–æ–±–æ–π.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –∑–∞–º–µ—Ç–∫–∏."
            )
        )
        return

    await state.update_data(second_filepath=filepath)
    await state.set_state(MergeNotes.new_file)

    await message.answer(
        text=(
            "üìÇ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏, "
            "–≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."
        ),
        reply_markup=exit_kb(),
    )


@router.message(MergeNotes.second_file)
async def handle_invalid_merge_secondfile(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏."
        ),
        reply_markup=exit_kb())


@router.message(MergeNotes.new_file, F.text)
async def handle_final_merge(message: types.Message, state: FSMContext):
    user_dir = ensure_user_dir(message.from_user.id)

    new_filename = sanitize_name(message.text.strip())
    new_filepath = user_dir / f"{new_filename}.md"

    data = await state.get_data()
    first_filepath = Path(data["first_filepath"])
    second_filepath = Path(data["second_filepath"])

    # —á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
    with open(first_filepath, encoding="utf-8") as f1:
        content1 = f1.readlines()[1:]  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

    # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—ã—Å–ª–µ–π –≤ –ø–µ—Ä–≤–æ–º —Ñ–∞–π–ª–µ
    count_first = sum(1 for line in content1 if line.startswith("## –ú—ã—Å–ª—å ‚Ññ"))

    # —á–∏—Ç–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª
    with open(second_filepath, encoding="utf-8") as f2:
        lines2 = f2.readlines()[1:]

    # –ø–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª
    updated_lines2 = []
    for line in lines2:
        if line.startswith("## –ú—ã—Å–ª—å ‚Ññ"):
            num = int(line.split("‚Ññ")[1])
            line = f"## –ú—ã—Å–ª—å ‚Ññ{num + count_first}\n"
        updated_lines2.append(line)

    # –ø–∏—à–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    with open(new_filepath, "w", encoding="utf-8") as new_f:
        new_f.write(f"# {new_filename}\n\n")
        new_f.writelines(content1)
        new_f.writelines(updated_lines2)

    await message.answer(
        text=(
            f"üéâ –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–§–∞–π–ª <b>{new_filename}.md</b> –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é."
        ),
        reply_markup=exit_kb(),
    )
    await state.clear()
