from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common_keyboards import exit_kb, menu_kb_builder
from routers.work_w_notes.states import Notes
from tools.create_dir import get_user_dir, sanitize_name

router = Router(name=__name__)


@router.message(Command('delete_note'))
async def handle_command_delete_note(message: types.Message, state: FSMContext):
    await message.answer(
        text=(
            "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
            "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        ),
        reply_markup=exit_kb(),
    )
    await state.set_state(Notes.delete_note)


@router.message(Notes.delete_note, F.text)
async def handle_state_delete_note(message: types.Message, state: FSMContext):
    user_dir = get_user_dir(message.from_user.id)  # –ª–∏—á–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    note_name = sanitize_name(message.text.strip())
    filepath = user_dir / f"{note_name}.md"

    if not filepath.exists():
        await message.answer(
            text=(
                "‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /all, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫."
            ),
            reply_markup=exit_kb(),
        )
        return

    try:
        filepath.unlink()  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer(
            text=(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ ¬´{note_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            ),
            reply_markup=menu_kb_builder(),
        )
    except Exception:
        await message.answer(
            text=(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É ¬´{note_name}¬ª.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É."
            ),
            reply_markup=exit_kb(),
        )

    await state.clear()


@router.message(Notes.delete_note)
async def handle_state_delete_note(message: types.Message):
    await message.answer(
        text=(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–π—Ç–∏¬ª."
        ),
        reply_markup=exit_kb(),
    )